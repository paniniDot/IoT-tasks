/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package room.service;

import room.service.client.Client;
import room.service.html.DataService;
import room.service.mqtt.MessageListener;
import room.service.serial.CommChannel;
import room.service.serial.SerialCommChannel;

import org.eclipse.paho.client.mqttv3.MqttException;

import io.vertx.core.Vertx;

import com.google.gson.*;

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class App {

    public static void main(String[] args) throws Exception {
        // Create a blocking queue to store the received messages
        BlockingQueue<String> messageQueue = new LinkedBlockingQueue<>();
        CommChannel serial = new SerialCommChannel("/dev/ttyACM3", 9600);
        Vertx vertx = Vertx.vertx();
		DataService service = new DataService(80);
		vertx.deployVerticle(service);
		Gson gson = new Gson();
        try (Client client = new Client("tcp", "broker.mqtt-dashboard.com", 1883)) {

            // Register message listeners for the topics
            client.registerToTopic("esp32/light", new MessageListener(messageQueue));
            client.registerToTopic("esp32/motion", new MessageListener(messageQueue));
            Thread.sleep(1000);
            while (true) {
                // Check if there are any messages in the queue
                if (!messageQueue.isEmpty()) {
                    String message = messageQueue.take();
                    //System.out.println(message);
                    serial.sendMsg(message);
                    if(serial.isMsgAvailable()) {
                    	//System.out.println(serial.receiveMsg());
                    }
                    String json = gson.toJson(new DataObject("photo_resistor", (int) (Math.random() * 100), System.currentTimeMillis()));
                    System.out.println(json);
                    service.addMeasure(json);
                }
            }
        } catch (MqttException | InterruptedException e) {
            e.printStackTrace();
        }
    }
  
    static class DataObject {
        private String name;
        private int measure;
        private long timestamp;

        public DataObject(String name, int measure, long timestamp) {
            this.name = name;
            this.measure = measure;
            this.timestamp = timestamp;
        }
    }
}
